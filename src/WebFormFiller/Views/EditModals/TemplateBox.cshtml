@using Form8snCore.FileFormats
@model WebFormFiller.Models.TemplateBoxModalViewModel
@* ReSharper disable AssignNullToNotNullAttribute *@
@* ReSharper disable PossibleNullReferenceException *@
@{
    Layout = null;
}
<!DOCTYPE html>
<html lang="en"><head>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <link rel="stylesheet" href="~/css/spectre.css" asp-append-version="true"/>
    <link rel="stylesheet" href="~/css/formFillerStyles.css" asp-append-version="true"/>
    <title>Box Edit Modal</title>
</head>
<body>
<script>
function showPickerModal() {
    alert("Would make the path picker modal visible now");
}
function showDisplayFormatModal(){
    alert("Would make the display format modal visible now");
}
</script>

<form asp-action="TemplateBox" method="post">
    <input type="hidden" asp-for="@Model.DocumentId" value="@Model.DocumentId"/>
    <input type="hidden" asp-for="@Model.PageIndex" value="@Model.PageIndex"/>
    <input type="hidden" asp-for="@Model.BoxKey" value="@Model.BoxKey"/>

    @* BOX NAME / KEY *@
    <div class="form-group">
        <label class="form-label" asp-for="@Model.BoxName">Box Name (must be unique on page)</label>
        <input class="form-input" type="text" asp-for="@Model.BoxName" placeholder="Name" value="@Model.BoxName">
    </div>

    @* SOURCE DATA OPTIONS *@
    <div class="form-group">
        <label class="form-label" asp-for="@Model.DataPath">Data Path</label>
        <button id="DataPathPickBtn" onclick="showPickerModal()">Pick Data</button>
        <input class="form-input" type="text" asp-for="@Model.DataPath" value="@Model.DataPath">
        
        <label class="form-label" asp-for="@Model.DisplayFormatDescription">Data Path</label>
        <button id="DisplayFormatBtn" onclick="showDisplayFormatModal()">Set Format</button>
        <input class="form-input" disabled="disabled" type="text" asp-for="@Model.DisplayFormatDescription" value="@Model.DisplayFormatDescription">
    </div>
    
    @* FONT-FIT OPTIONS *@
    <div class="form-group">
        <label class="form-label" asp-for="@Model.FontSize">Font Size (optional)</label>
        <input class="form-input" type="text" asp-for="@Model.FontSize" placeholder="" value="@Model.FontSize">
        
        <label class="form-checkbox form-inline" asp-for="@Model.WrapText">
            <input type="checkbox" asp-for="@Model.WrapText"><i class="form-icon"></i> Wrap Text
        </label>
        
        <label class="form-checkbox form-inline" asp-for="@Model.ShrinkToFit">
            <input type="checkbox" asp-for="@Model.ShrinkToFit"><i class="form-icon"></i> Shrink to Fit
        </label>
    </div>
    
    @* DEPENDENCY OPTIONS*@
    <div class="form-group">
        <label class="form-label" asp-for="@Model.ProcessingOrder">Processing Order (optional)</label>
        <input class="form-input" type="text" asp-for="@Model.ProcessingOrder" value="@Model.ProcessingOrder">
        
        <label class="form-label" asp-for="@Model.DependsOn">Depends On (optional - hide this box if another is empty)</label>
        <select class="form-select" asp-for="@Model.DependsOn" asp-items="@Model.OtherBoxKeys">
            <option value="">- none -</option>
        </select>
    </div>
    
    @* TEXT ALIGNMENT OPTIONS *@
    <div class="form-group">
        <label class="form-label" asp-for="@Model.ProcessingOrder">Processing Order (optional)</label>
        <table>
            @* ReSharper disable Html.IdNotResolved *@
            <tr>
                <td>@Html.RadioButtonFor(x => x.TextAlign, TextAlignment.TopLeft,   new{id="TA_TL"}) <label for="TA_TL">Top Left</label></td>
                <td>@Html.RadioButtonFor(x => x.TextAlign, TextAlignment.TopCentre, new{id="TA_TC"}) <label for="TA_TC">Top Centre</label></td>
                <td>@Html.RadioButtonFor(x => x.TextAlign, TextAlignment.TopRight,  new{id="TA_TR"}) <label for="TA_TR">Top Right</label></td>
            </tr>
            <tr>
                <td>@Html.RadioButtonFor(x => x.TextAlign, TextAlignment.MidlineLeft,   new{id="TA_ML"}) <label for="TA_ML">Midline Left</label></td>
                <td>@Html.RadioButtonFor(x => x.TextAlign, TextAlignment.MidlineCentre, new{id="TA_MC"}) <label for="TA_MC">Midline Centre</label></td>
                <td>@Html.RadioButtonFor(x => x.TextAlign, TextAlignment.MidlineRight,  new{id="TA_MR"}) <label for="TA_MR">Midline Right</label></td>
            </tr>
            <tr>
                <td>@Html.RadioButtonFor(x => x.TextAlign, TextAlignment.BottomLeft,   new{id="TA_BL"}) <label for="TA_BL">Bottom Left</label></td>
                <td>@Html.RadioButtonFor(x => x.TextAlign, TextAlignment.BottomCentre, new{id="TA_BC"}) <label for="TA_BC">Bottom Centre</label></td>
                <td>@Html.RadioButtonFor(x => x.TextAlign, TextAlignment.BottomRight,  new{id="TA_BR"}) <label for="TA_BR">Bottom Right</label></td>
            </tr>
            @* ReSharper restore Html.IdNotResolved *@
        </table>
    </div>
</form>

@* TODO: Put an initially invisible modal here, ready to pick a data item *@


</body>
</html>