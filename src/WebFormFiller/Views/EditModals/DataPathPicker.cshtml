@model DataSourceViewModel
@{ Layout = null; }
@* ReSharper disable AssignNullToNotNullAttribute *@
@* ReSharper disable PossibleNullReferenceException *@

<table class="picker cell" style="width:100%">
    <thead>
    <tr>
        <th><span class="visually-hidden">Toggles</span></th>
        <th style="width:100%"><span class="visually-hidden">Data that can be selected</span></th>
        <th><span class="visually-hidden">Selection options</span></th>
    </tr>
    </thead>
    <tbody>
@*
  Note - For anything that's not expanded, we need to set an expansion id,
  and set class=hidden; We also want a toggle button with the on-click to expand it.
*@
    @foreach (var node in Model!.Nodes)
    {
        <tr id="@node.HtmlId" class="@node.InitialDisplayClass">
            <td style="margin-left:@(node.Depth.ToString())em">
                @if (node.HasChildren)
                {
                    <button type="button" id="btn-@node.HtmlId" class="expando" aria-expanded="false" childIds="@node.ChildIds" onclick="toggle('btn-@node.HtmlId')">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 80 80" focusable="false"><path d="M70.3 13.8L40 66.3 9.7 13.8z"></path></svg>
                    </button>
                }
            </td>
            <td style="padding-left:@(node.Depth.ToString())em;color:@(node.ForeColor)">
                @node.Text
            </td>
            <td>
                @if (node.Selected)
                {
                    <button disabled=disabled>Pick</button>
                }
                else if (node.CanBePicked)
                {
                    <button onclick="captureDataPickerResult('@node.DataPath', '@Model.Target')">Pick</button>
                }
            </td>
        </tr>
    }
    </tbody>
</table>