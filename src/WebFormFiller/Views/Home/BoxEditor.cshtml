@model TemplateEditViewModel

@{
    ViewBag!.Title = "Document editor";
    Layout = "_Layout";
    var pdfWorkerSource = Url!.Content("~/js/pdf.worker.js")!;
}

@* PAGE CONTROLS *@
<div>
    <button id="prev">Previous</button>
    <button id="next">Next</button>
	
    <span>Page: <span id="page_num"></span> / <span id="page_count"></span></span>
</div>

@* PAGE RENDERING *@
<div id="container">
    <canvas id="pdf-render" class="subCanvas"></canvas>
    <canvas id="box-render" class="subCanvas"></canvas>
</div>

@* Taken from https://mozilla.github.io/pdf.js/build/pdf.js *@
<script src="~/js/pdf.js" asp-append-version="true"></script>

<script>
// Load a sample PDF with complex elements and multiple pages
const url = "@Model!.PdfUrl";//'https://raw.githubusercontent.com/mozilla/pdf.js/ba2edeae/web/compressed.tracemonkey-pldi-09.pdf';

// Read PDF.js exports from the ~/js/pdf.js file
const pdfJsLib = window['pdfjs-dist/build/pdf'];

// Setup the workerSrc property. Originally from https://mozilla.github.io/pdf.js/build/pdf.worker.js
pdfJsLib.GlobalWorkerOptions.workerSrc = "@pdfWorkerSource";

// PDF rendering bits
let pdfDoc = null,
    pageNum = 1,
    pageRendering = false,
    pageNumPending = null; const scale = 2.8, // zoom level of the PDF
    // TODO: ability to change the scale level and update the rendering
    pdfCanvas = document.getElementById('pdf-render'),
    pdfCtx = pdfCanvas.getContext('2d');

// Box rendering bits
const outerContainer = document.getElementById("container");
const boxCanvas = document.getElementById("box-render");
const boxCtx = boxCanvas.getContext("2d");


/**
 * Get page info from document, resize canvas accordingly, and render page.
 * num is Page number.
 */
function renderPage(num) {
  pageRendering = true;
  // Using promise to fetch the page
  pdfDoc.getPage(num).then(function(page) {
    const viewport = page.getViewport({scale: scale});
    console.dir(viewport);
    console.log(`Native PDF page size is ${viewport.height}x${viewport.width}`);
    outerContainer.style.width = viewport.width+'px'; 
    outerContainer.style.height = viewport.height+'px'; 
    
    pdfCanvas.height = viewport.height;
    pdfCanvas.width = viewport.width;
    
    boxCanvas.height = viewport.height;
    boxCanvas.width = viewport.width;
    
    // Render PDF page into canvas context
    const renderContext = {
      canvasContext: pdfCtx,
      viewport: viewport
    };
    const renderTask = page.render(renderContext);

    // Wait for rendering to finish
    renderTask.promise.then(function() {
      pageRendering = false;
      if (pageNumPending !== null) {
        // New page rendering is pending
        renderPage(pageNumPending);
        pageNumPending = null;
      }
    });
  });

  // Update page counters
  document.getElementById('page_num').textContent = num;
}

/**
 * If another page rendering in progress, waits until the rendering is
 * finished. Otherwise, executes rendering immediately.
 */
function queueRenderPage(num) {
  if (pageRendering) {
    pageNumPending = num;
  } else {
    renderPage(num);
  }
}


// Click event for loading previous page
function onPrevPage() {
  if (pageNum <= 1) { return; }
  pageNum--;
  queueRenderPage(pageNum);
}
document.getElementById('prev').addEventListener('click', onPrevPage); // bind event to button

// Click event for loading next page
function onNextPage() {
  if (pageNum >= pdfDoc.numPages) { return; }
  pageNum++;
  queueRenderPage(pageNum);
}
document.getElementById('next').addEventListener('click', onNextPage); // bind event to button

</script>

@* BOX DRAW SCRIPTS *@
<script>
(function() { // Activate the overlay canvas with mouse event handlers
	const canvas = document.querySelector('#box-render');
	const ctx = canvas.getContext('2d');

	let box = {top:0, left:0, right:0, bottom:0};
	let mouse = {x: 0, y: 0, buttons:0};
    let last_mouse = {x: 0, y: 0};

	
	
	ctx.lineWidth = 5;
	ctx.strokeStyle = 'blue';
	
	// mouseleave, mouseenter, * mouseout, * mouseover
	
	
	//////////////////////////////////////////////////////////////////////////////////////////////////// PAINT ALL
	const onPaint = function() {
		ctx.clearRect(0, 0, canvas.width, canvas.height);
		ctx.fillStyle = "rgba(255, 80, 80, 0.3)";
		ctx.strokeStyle = "#F00";
		ctx.lineWidth = 3;
		
		ctx.fillRect(box.left, box.top, box.right-box.left, box.bottom-box.top);
		ctx.strokeRect(box.left, box.top, box.right-box.left, box.bottom-box.top);
	};
	
	
	//////////////////////////////////////////////////////////////////////////////////////////////////// MOUSE DOWN
	canvas.addEventListener('mouseout', function(){ mouse.buttons = 0; }); // prevent drag-lock
	canvas.addEventListener('mousedown', function(e) {
		box.top = 0|e.offsetY;
		box.left = 0|e.offsetX;
		
		// TODO: handle initial click (right or left?) -- might want to pop up the details modal
	}, false);
	
	//////////////////////////////////////////////////////////////////////////////////////////////////// MOUSE UP
	canvas.addEventListener('mouseup', function(e) {
		box.right = 0|e.offsetX;
		box.bottom = 0|e.offsetY;
		
		onPaint();
		
		// TODO: handle release. We might want to send changes back to the server
	}, false);
		
	//////////////////////////////////////////////////////////////////////////////////////////////////// MOUSE MOVE
	canvas.addEventListener('mousemove', function(e) {
		let newX = e.offsetX;
		let newY = e.offsetY;
		if (mouse.buttons !== 0) { // mouse is dragging
			last_mouse.x = mouse.x;
			last_mouse.y = mouse.y;
		} else { // mouse is hovering
			last_mouse.x = newX;
			last_mouse.y = newY;
		}
		
		mouse.buttons = e.buttons;
		mouse.x = newX;
		mouse.y = newY;
		
		box.right = 0|e.offsetX;
		box.bottom = 0|e.offsetY;
		
		if (mouse.buttons !== 0) {
			onPaint();
		}
	}, false);
	
}());
</script>

@* PDF LOAD SCRIPTS *@
<script>
// Actually load the PDF (async then call our page render)
// This requires a modern web browser that supports promises.
pdfJsLib.getDocument(url).promise.then(function(pdfDoc_) {
  pdfDoc = pdfDoc_;
  document.getElementById('page_count').textContent = pdfDoc.numPages;

  // Initial/first page rendering
  renderPage(pageNum);
});
</script>